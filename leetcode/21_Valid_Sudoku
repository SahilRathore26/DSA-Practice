class Solution
{
  public:
  // Checks if it's safe to place 'dig' at (row, col)
  bool isSafe(vector<vector<char>> &board, int row, int col, char dig)
  {
    for (int j = 0; j < 9; j++)
    {
      if (j != col && board[row][j] == dig)
        return false;
    }
    for (int i = 0; i < 9; i++)
    {
      if (i != row && board[i][col] == dig)
        return false;
    }
    int sRow = (row / 3) * 3;
    int sCol = (col / 3) * 3;
    for (int i = sRow; i < sRow + 3; i++)
    {
      for (int j = sCol; j < sCol + 3; j++)
      {
        if ((i != row || j != col) && board[i][j] == dig)
          return false;
      }
    }
    return true;
  }

  // Recursively validate each cell row by row
  bool isValid(vector<vector<char>> &board, int row, int col)
  {
    if (row == 9)
      return true;
    int nextRow = row, nextCol = col + 1;
    if (nextCol == 9)
    {
      nextRow++;
      nextCol = 0;
    }
    char val = board[row][col];
    if (val != '.')
    {
      if (!isSafe(board, row, col, val))
        return false;
    }
    return isValid(board, nextRow, nextCol);
  }

  bool isValidSudoku(vector<vector<char>> &board)
  {
    return isValid(board, 0, 0);
  }
};
